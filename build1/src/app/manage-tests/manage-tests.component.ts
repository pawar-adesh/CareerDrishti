import { Component, OnInit } from '@angular/core';
import { ApiService } from '../api.service';
import { Questions } from '../shared/manage-test.model';
import { AptiQuestions } from '../shared/aptitude.model';
import { FormBuilder, FormGroup } from '@angular/forms';
@Component({
  selector: 'app-manage-tests',
  templateUrl: './manage-tests.component.html',
  styleUrls: ['./manage-tests.component.css'],
})
export class ManageTestsComponent implements OnInit {
  formValue!: FormGroup;
  AptiformValue!: FormGroup;
  questionData10!: any;
  questionData12!: any;
  questionDataApti!: any;
  isAdded!: boolean;
  isUpdated!: boolean;
  queObj: Questions = new Questions();
  aptiQueObj: AptiQuestions = new AptiQuestions();
  enable10: boolean = false;
  enable12: boolean = false;
  enableApti: boolean = false;
  constructor(private api: ApiService, private formBuilder: FormBuilder) {}

  ngOnInit(): void {
    this.formValue = this.formBuilder.group({
      queID: [''],
      question: [''],
      questionMarathi: [''],
      questionField: [''],
    });
    this.AptiformValue = this.formBuilder.group({
      qID: [''],
      question: [''],
      // questionMarathi: [''],
      option1: [''],
      option2: [''],
      option3: [''],
      option4: [''],
      answer: [''],
      questionType: [''],
    });
    this.getAllQuestions();
  }
  activateAdd() {
    this.formValue.reset();
    this.isAdded = true;
    this.isUpdated = false;
  }
  getAllQuestions() {
    this.api.showQuestions10().subscribe((res) => {
      this.questionData10 = res;
      // console.log(res);
    });

    this.api.showQuestions12().subscribe((res) => {
      this.questionData12 = res;
      // console.log(res);
    });

    this.api.sectionBQuestions().subscribe((res)=>{
      this.questionDataApti = res.questionDetails;
      console.log(res);
    })
  }

  manage10() {
    this.enable10 = true;
    this.enable12 = false;
    this.enableApti=false;
  }

  manage12() {
    this.enable10 = false;
    this.enable12 = true;
    this.enableApti = false;
  }

  manageApti(){
    this.enable10 = false;
    this.enable12 = false;
    this.enableApti = true;
  }

  addQuestions() {
    this.queObj.quetsionID = 'autogenerated';
    this.queObj.question = this.formValue.value.question;
    this.queObj.questionMarathi = this.formValue.value.questionMarathi;
    this.queObj.questionField = this.formValue.value.questionField;
    if (this.enable10) {
      this.queObj.std = '10';
    } else if (this.enable12) {
      this.queObj.std = '12';
    }
    this.api.addQuestions(this.queObj).subscribe((res) => {
      // console.log(res);
      alert('added question');
      let closeBtn = document.getElementById('close');
      closeBtn?.click();
      this.getAllQuestions();
    });
  }

  addAptiQuestions() {
    this.aptiQueObj.qID = "0";
    this.aptiQueObj.que = this.AptiformValue.value.question;
    this.aptiQueObj.option1 = this.AptiformValue.value.option1;
    this.aptiQueObj.option2 = this.AptiformValue.value.option2;
    this.aptiQueObj.option3 = this.AptiformValue.value.option3;
    this.aptiQueObj.option4 = this.AptiformValue.value.option4;
    this.aptiQueObj.answer = this.AptiformValue.value.answer;
    this.aptiQueObj.queType = this.AptiformValue.value.questionType;
    this.api.addQuestionsB(this.aptiQueObj).subscribe((res) => {
      // console.log(res);
      alert('added question');
      let closeBtn = document.getElementById('closeApti');
      closeBtn?.click();
      this.getAllQuestions();
    });
  }

  onEdit(row: any) {
    this.queObj.quetsionID = row.queID;
    this.formValue.controls['queID'].setValue(row.quetsionID);
    this.formValue.controls['question'].setValue(row.question);
    this.formValue.controls['questionMarathi'].setValue(row.questionMarathi);
    this.formValue.controls['questionField'].setValue(row.questionField);
    if (this.enable10) {
      this.queObj.std = '10';
    } else if (this.enable12) {
      this.queObj.std = '12';
    }
    this.isAdded = false;
    this.isUpdated = true;
  }

  onEditApti(row: any) {
    this.aptiQueObj.qID = row.qID;
    this.AptiformValue.controls['question'].setValue(row.que);
    this.AptiformValue.controls['option1'].setValue(row.option1);
    this.AptiformValue.controls['option2'].setValue(row.option2);
    this.AptiformValue.controls['option3'].setValue(row.option3);
    this.AptiformValue.controls['option4'].setValue(row.option4);
    this.AptiformValue.controls['answer'].setValue(row.answer);
    this.AptiformValue.controls['questionType'].setValue(row.queType);

    // this.api.updateQuestionB(this.aptiQueObj).subscribe((res) => {
    //   alert('Updated Successfully');
    //   let closeBtn = document.getElementById('close');
    //   closeBtn?.click();
    //   this.getAllQuestions();
    // });
    this.isAdded = false;
    this.isUpdated = true;
  }

  editAptiQuestion() {
    this.aptiQueObj.qID = this.aptiQueObj.qID;
    this.aptiQueObj.que = this.AptiformValue.value.question;
    this.aptiQueObj.option1 = this.AptiformValue.value.option1;
    this.aptiQueObj.option2 = this.AptiformValue.value.option2;
    this.aptiQueObj.option3 = this.AptiformValue.value.option3;
    this.aptiQueObj.option4 = this.AptiformValue.value.option4;
    this.aptiQueObj.answer = this.AptiformValue.value.answer;
    this.aptiQueObj.queType = this.AptiformValue.value.questionType;
    this.api.updateQuestionB(this.aptiQueObj).subscribe((res) => {
      alert('Updated Successfully');
      let closeBtn = document.getElementById('close');
      closeBtn?.click();
      this.getAllQuestions();
    });
  }

  editQuestion() {
    this.queObj.quetsionID = this.formValue.value.queID;
    this.queObj.question = this.formValue.value.question;
    this.queObj.questionField = this.formValue.value.questionField;
    this.api.updateQuestion(this.queObj).subscribe((res) => {
      alert('Updated Successfully');
      let closeBtn = document.getElementById('close');
      closeBtn?.click();
      this.getAllQuestions();
    });
  }

  deleteQuestion(row: any) {
    let clickedYes = confirm('Are you sure want to delete');
    if (clickedYes) {
      this.api.delQue(row.quetsionID).subscribe((res) => {
        alert('Deleted Successfully');
        this.getAllQuestions();
      });
    }
  }

  deleteAptiQuestion(row: any) {
    let clickedYes = confirm('Are you sure want to delete');
    if (clickedYes) {
      this.api.delQueB(row.qID).subscribe((res) => {
        alert('Deleted Successfully');
        this.getAllQuestions();
      });
    }
  }
}
